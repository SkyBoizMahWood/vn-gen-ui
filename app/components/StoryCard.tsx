import { Form } from "@remix-run/react";
import LoadingSpinner from "./LoadingSpinner";

type Story = {
  id: string;
  title: string;
  generated_by: string;
  themes: string[];
};

type StoryCardProps = {
  story: Story;
  isLoading: boolean;
};

export default function StoryCard({ story, isLoading }: StoryCardProps) {
  return (
    <Form action="?index" method="POST" className="h-full">
      <input type="hidden" name="storyId" value={story.id} />
      <button
        className="flex h-full w-full flex-col rounded-lg border-2 border-indigo-500 
                   bg-white p-6 text-left shadow-md transition-all 
                   hover:border-indigo-600 hover:bg-indigo-50 
                   disabled:opacity-50 dark:bg-slate-800 
                   dark:hover:bg-slate-700"
        disabled={isLoading}
        title={`Id: ${story.id}\nThemes: ${story.themes.join(", ")}`}
      >
        {/* Story Title */}
        <h2 className="mb-3 text-xl font-bold text-indigo-600 dark:text-indigo-400">
          {story.title}
        </h2>

        {/* Generated By */}
        <p className="mb-4 text-sm text-slate-600 dark:text-slate-300">
          Generated by: {story.generated_by}
        </p>

        {/* Themes */}
        <div className="mt-auto flex flex-wrap gap-2">
          {story.themes.map((theme) => (
            <span
              key={theme}
              className="rounded-full bg-indigo-100 px-3 py-1 text-sm 
                         text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200"
            >
              {theme}
            </span>
          ))}
        </div>

        {/* Loading Indicator */}
        {isLoading && (
          <div className="mt-4 flex justify-center">
            <LoadingSpinner size="sm" position="inline" color="primary" />
          </div>
        )}
      </button>
    </Form>
  );
} 